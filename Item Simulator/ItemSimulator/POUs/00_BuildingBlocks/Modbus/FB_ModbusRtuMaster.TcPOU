<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_ModbusRtuMaster" Id="{327a79ab-5f0e-47f1-a2e4-dc5c0ddbdcaf}" SpecialFunc="None">
    <Declaration><![CDATA[// FB_ModbusMaster
//------------------------------------------------------
// This FB must be called in a 2 ms task and in every scan
// Test with Danfoss FC301 shows that up to approximately 46 registers can be read pr. sec.
// Test was done with baud 115200. 
// V 1.1, Updated so that Modbus master continues to next unit if an error occurs.  
// V 1.0, Baseline. Developed december 2021 
FUNCTION_BLOCK FB_ModbusRtuMaster
VAR_INPUT
	pUnit					:POINTER TO ARRAY[1..cNoOfUnitsMax] OF ST_Modbus_Unit;
	nNoOfUnits				:INT;			// Number of modbus units. Maximum value is 20.					
	nNoOfParam				:INT;			// Number of modbus parameters to be read from unit. Maximum value is determined by ST_Modbus_Unit. 
END_VAR
VAR_OUTPUT
	bBusy					:BOOL;			// True while command is beeing executed
	bError					:BOOL;			// True if an error occured during execution of a command
	nErrorUnit				:INT;			// First unit where error was detected in communication
END_VAR
VAR
	// Commands
	bCmdCyclicRead			:BOOL;			// Command for cyclic reading of parameter registers
	bCmdStop				:BOOL;			// Command for stop
	bCmdReset				:BOOL;			// Command for reset of active errors
	
	// General	
	bInit					:BOOL := TRUE;	// True at the start of false scan, false otherwise
	nReadCount				:INT;			// Counts the number of succesfull read operations
	nValueTempInt16			:INT;			// Value used in conversion from byte data to actual data value
	nValueTempInt32			:DINT;			// Value used in conversion from byte data to actual data value
	
	// Statemachine
	eStep					:E_ModbusRtuMaster_State;	// State
	eStepPrevious			:E_ModbusRtuMaster_State;	// State from previous scan
	eStatePrevious			:E_ModbusRtuMaster_State;	// Previous state
	nStepSecCount			:UDINT;						// Counts number of seconds without state transitions
	wStateSecOld			:WORD;						// Seconds value from NtTime from previous scan	
	eStepEntry				:BOOL;						// True in one scan when a new state is entered
	arrStateLog				:ARRAY[0..19] OF ST_ModbusRtuMaster_StateLogEntry; // Log that contains the last xx states
	
	// Modbus master
	fbModBusMaster			:ModbusRtuMaster_KL6x22B;	// Modbus master functions
	bReadExe				:BOOL;						// On rising edge reading is started
	bReadBusy				:BOOL;						// True while modbus master reads register on unit
	bReadError				:BOOL;						// True if read error occured
	eReadErrorID			:MODBUS_ERRORS;				// Modbus error ID
	nReadNoOfBytes			:UINT;						// Nunber of bytes read in read cycle

	// Units
	nUnitActive				:INT;						// Active unit in cyclic read
	nParamActive			:INT;						// Active parameter in cyclic read
END_VAR
VAR CONSTANT
	cNoOfUnitsMax			:INT:= 20;					// Maximum number of units for modbus master
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Initialization	
IF bInit THEN	
	bInit := FALSE;
END_IF

// Wait for reset
IF bCmdReset THEN
	bCmdReset := FALSE;
	bError := FALSE;
	nErrorUnit := 0;
	bReadExe := FALSE;
	eStep := E_ModbusRtuMaster_State.eIdle;	
END_IF

// Update fb for modbus communication
IF eStep >= E_ModbusRtuMaster_State.eReadPre AND eStep <= E_ModbusRtuMaster_State.eReadPost THEN
	fbModbusMaster.ReadRegs(
		UnitID:= pUnit^[nUnitActive].nAddr, 
		Quantity:= pUnit^[nUnitActive].aParam[nParamActive].nQuantity, 
		MBAddr:= (pUnit^[nUnitActive].aParam[nParamActive].nMemAddr*10)-1, 
		cbLength:= pUnit^[nUnitActive].aParam[nParamActive].nQuantity*2, 
		pMemoryAddr:= ADR(pUnit^[nUnitActive].aParam[nParamActive].aDataStorage), 
		Execute:= bReadExe, 
		Timeout:= T#2S, 
		BUSY=> bReadBusy, 
		Error=> bReadError, 
		ErrorId=> eReadErrorID, 
		cbRead=> nReadNoOfBytes);	
END_IF

	
// State machine
//----------------------------------------
// Check for new state entry
IF eStep <> eStepPrevious THEN
	// New state, Set entry flag
	eStepEntry := TRUE;
	eStatePrevious := eStepPrevious;
ELSE
	// Same state as last scan, remove entry flag
	eStepEntry := FALSE;
END_IF
// Update state log
A_StateLog();
// Reset "old" state to present value
eStepPrevious := eStep;
	

CASE eStep OF
E_ModbusRtuMaster_State.eReset:
	eStep := E_ModbusRtuMaster_State.eIdle;	


E_ModbusRtuMaster_State.eIdle:
	// Entry
	IF eStepEntry THEN
		A_ResetAllCmd();
		bBusy 	:= FALSE;
		bError	:= FALSE;
		bReadExe := FALSE;
	END_IF
	// Wait for command
	IF bCmdCyclicRead THEN
		bBusy	 := TRUE;
		bReadExe := FALSE;
		bCmdCyclicRead := FALSE;
		nUnitActive := 1;
		nParamActive := 1;
		eStep := E_ModbusRtuMaster_State.eReadPre;
	END_IF
		
	
E_ModbusRtuMaster_State.eReadPre:
	// Send request for reading of hold register
	bReadExe := TRUE;
	//IF bReadBusy THEN
		eStep := E_ModbusRtuMaster_State.eReadPost;
	//END_IF	 
	
	
E_ModbusRtuMaster_State.eReadPost:
	// Wait for answer back
	IF NOT bReadBusy THEN
		IF NOT bReadError THEN
			// Successfull read
			nReadCount := nReadCount + 1;
			// Convert return data to value
			IF pUnit^[nUnitActive].aParam[nParamActive].eDataType = E_Modbus_DataType.eInt16 THEN
				nValueTempInt16 := FUN_ConvTwoByteToInt16(
									nValue1:= pUnit^[nUnitActive].aParam[nParamActive].aDataStorage[1],
									nValue2:= pUnit^[nUnitActive].aParam[nParamActive].aDataStorage[2]);
				pUnit^[nUnitActive].aParam[nParamActive].aDataValue := INT_TO_REAL(nValueTempInt16) * pUnit^[nUnitActive].aParam[nParamActive].fConvFactor;				
			ELSIF pUnit^[nUnitActive].aParam[nParamActive].eDataType = E_Modbus_DataType.eInt32 THEN
				nValueTempInt32 := FUN_ConvFourByteToInt32(
									nValue1:= pUnit^[nUnitActive].aParam[nParamActive].aDataStorage[3],
									nValue2:= pUnit^[nUnitActive].aParam[nParamActive].aDataStorage[4],
									nValue3:= pUnit^[nUnitActive].aParam[nParamActive].aDataStorage[1],
									nValue4:= pUnit^[nUnitActive].aParam[nParamActive].aDataStorage[2]);
				pUnit^[nUnitActive].aParam[nParamActive].aDataValue := DINT_TO_REAL(nValueTempInt32) * pUnit^[nUnitActive].aParam[nParamActive].fConvFactor; 
			END_IF
			// Determine next step
			IF NOT bCmdStop THEN
				// Update setting to next parameter (and unit if this was the last parameter)
				nParamActive := nParamActive + 1;
				IF nParamActive > nNoOfParam THEN
					// All parameters read from unit. Change to next unit
					nParamActive := 1;
					IF nUnitActive >= nNoOfUnits THEN
						// Loop back to first unit in array
						nUnitActive := 1;
					ELSE
						// Take next unit in array
						nUnitActive := nUnitActive + 1;
					END_IF		
				END_IF
				// Go back and start reading the next parameter
				bReadExe := FALSE;
				eStep := E_ModbusRtuMaster_State.eReadPre;
			ELSE
				// Stop cyclic reading of hold registers
				eStep := E_ModbusRtuMaster_State.eIdle;
			END_IF
		ELSE
			// Error occured
			eStep := E_ModbusRtuMaster_State.eError;	
		END_IF	
	END_IF

	
E_ModbusRtuMaster_State.eError:
	// Entry
	IF eStepEntry THEN
		A_ResetAllCmd();
		bBusy := FALSE;
		IF nErrorUnit = 0 THEN
			bError := TRUE;	 
			nErrorUnit := nUnitActive;
		END_IF
	END_IF
	
	// Go back and try next unit
	IF nUnitActive >= nNoOfUnits THEN
		// Loop back to first unit in array
		nUnitActive := 1;
	ELSE
		// Take next unit in array
		nUnitActive := nUnitActive + 1;
	END_IF
	// Go back and start reading the next parameter
	bReadExe := FALSE;
	eStep := E_ModbusRtuMaster_State.eReadPre;
	
	(*
	// Wait for reset
	IF bCmdReset THEN
		bCmdReset := FALSE;
		eStep := E_ModbusRtuMaster_State.eIdle;	
	END_IF
	*)
END_CASE ]]></ST>
    </Implementation>
    <Action Name="A_ResetAllCmd" Id="{7c34c04f-05cc-44a7-9e61-179053acf69e}">
      <Implementation>
        <ST><![CDATA[// Reset all commands
bCmdCyclicRead := FALSE;
bCmdStop  := FALSE;
bCmdReset := FALSE;]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_StateLog" Id="{a314ded5-f180-4f84-8db4-a0e5056545a7}">
      <Implementation>
        <ST><![CDATA[// Action: State log
//---------------------------------------------------------------
// The code below implements a simple state log in RAM. The purpose of the log
// is to give the developer a state history when debugging.

// Seconds counter
//-----------------------------------------------
IF wStateSecOld <> GVL_System.stNtTime.wSecond THEN
	// New second => Update counter
	IF nStepSecCount >= 4294967294 THEN
		nStepSecCount := 0;
	END_IF
	nStepSecCount := nStepSecCount + 1;
END_IF  
wStateSecOld := GVL_System.stNtTime.wSecond;

// Update time in active state
//-----------------------------------------------
arrStateLog[0].iSecCount := nStepSecCount;

// Update Stringer state log
//-----------------------------------------------
IF 	(eStep <> eStepPrevious) THEN
	// New state transition has occured => make new entry in the state log
	// Start with shift in log (FIFO)
	MEMMOVE(
		destAddr:= ADR(arrStateLog[1]), 
		srcAddr:= ADR(arrStateLog[0]), 
		n:= (SIZEOF(arrStateLog) - SIZEOF(arrStateLog[0]))); 
		
	// Add new entry to start of log
	arrStateLog[0].eStep 		:= eStep; 
	arrStateLog[0].sTimeEntry 	:= FUN_GetTimestamp(GVL_System.stNtTime);
	arrStateLog[0].iSecCount 	:= 0;
	
	// Reset seconds counter
	nStepSecCount := 0;
END_IF
]]></ST>
      </Implementation>
    </Action>
    <Method Name="M_CmdCyclicRead" Id="{3bd53146-186c-47f6-8287-a621a798a381}">
      <Declaration><![CDATA[METHOD M_CmdCyclicRead : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Check if it is a valid command
IF eStep = E_ModbusRtuMaster_State.eIdle THEN
	// Valid command
	bCmdCyclicRead := TRUE;
END_IF

// Return result for acceptance of command
IF bCmdCyclicRead THEN
	M_CmdCyclicRead := TRUE;
ELSE
	M_CmdCyclicRead := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_CmdReset" Id="{5d92a548-e47a-4031-9eb7-26936cfc9e82}">
      <Declaration><![CDATA[METHOD M_CmdReset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Check if it is a valid command
IF eStep = E_ModbusRtuMaster_State.eError THEN
	// Valid command
	bCmdReset := TRUE;
END_IF

// Return result for acceptance of command
IF bCmdReset THEN
	M_CmdReset := TRUE;
ELSE
	M_CmdReset := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_CmdStop" Id="{db5e03c9-defb-45dc-b017-65862ee7e40b}">
      <Declaration><![CDATA[METHOD M_CmdStop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Check if it is a valid command
IF eStep > E_ModbusRtuMaster_State.eIdle AND eStep < E_ModbusRtuMaster_State.eError THEN
	// Valid command
	bCmdStop := TRUE;
END_IF

// Return result for acceptance of command
IF bCmdStop THEN
	M_CmdStop := TRUE;
ELSE
	M_CmdStop := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_ModbusRtuMaster">
      <LineId Id="3" Count="159" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModbusRtuMaster.A_ResetAllCmd">
      <LineId Id="2" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModbusRtuMaster.A_StateLog">
      <LineId Id="2" Count="37" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModbusRtuMaster.M_CmdCyclicRead">
      <LineId Id="3" Count="11" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModbusRtuMaster.M_CmdReset">
      <LineId Id="3" Count="11" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModbusRtuMaster.M_CmdStop">
      <LineId Id="3" Count="11" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>