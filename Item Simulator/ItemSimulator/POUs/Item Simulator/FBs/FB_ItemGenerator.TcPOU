<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_ItemGenerator" Id="{eac0d150-9a09-4cac-8189-20042b570512}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ItemGenerator
VAR_INPUT
	bStart				:BOOL;
	bStop				:BOOL;
	
	aStItemGen			:ARRAY[1..10] OF ST_ItemGenerator;
	stItemGenFromReg	:ST_ItemGenerator;
	
END_VAR
VAR
	//Item generators
	fbItemGen1			:FB_ClockPulsNumber;
	fbItemGen2			:FB_ClockPulsNumber;
	fbItemGen3			:FB_ClockPulsNumber;
	fbItemGen4			:FB_ClockPulsNumber;
	fbItemGen5			:FB_ClockPulsNumber;
	fbItemGen6			:FB_ClockPulsNumber;
	fbItemGen7			:FB_ClockPulsNumber;
	fbItemGen8			:FB_ClockPulsNumber;
	fbItemGen9			:FB_ClockPulsNumber;
	fbItemGen10			:FB_ClockPulsNumber;
	fbItemGenFromReg	:FB_ClockPulsNumber;
	
	//Sequence
	bInit				:BOOL := TRUE;
	eState				:E_ItemGenerator;
	
END_VAR

VAR_OUTPUT
	bSignalOutput		:BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Init
IF bInit THEN
	eState := E_ItemGenerator.Idle;
	bInit := FALSE;
END_IF

//Call item generator cases
M_GeneratorCases();

//Reset Commands
bstart := FALSE;
bStop := FALSE;
]]></ST>
    </Implementation>
    <Method Name="M_GeneratorCases" Id="{61ba97f2-018e-4651-86db-7fb76b4696d8}">
      <Declaration><![CDATA[METHOD PUBLIC M_GeneratorCases
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE eState OF
	
	// Idle
	E_ItemGenerator.Idle:
	
		// Reset generators
		fbItemGen1(
			bTrig := FALSE,
			bStop := TRUE,
			bPuls => bSignalOutput);
			
		fbItemGen2(
			bTrig := FALSE,
			bStop := TRUE,
			bPuls => bSignalOutput);
			
		fbItemGen3(
			bTrig := FALSE,
			bStop := TRUE,
			bPuls => bSignalOutput);
			
		fbItemGen4(
			bTrig := FALSE,
			bStop := TRUE,
			bPuls => bSignalOutput);
			
		fbItemGen5(
			bTrig := FALSE,
			bStop := TRUE,
			bPuls => bSignalOutput);
			
		fbItemGen6(
			bTrig := FALSE,
			bStop := TRUE,
			bPuls => bSignalOutput);
			
		fbItemGen7(
			bTrig := FALSE,
			bStop := TRUE,
			bPuls => bSignalOutput);
			
		fbItemGen8(
			bTrig := FALSE,
			bStop := TRUE,
			bPuls => bSignalOutput);
			
		fbItemGen9(
			bTrig := FALSE,
			bStop := TRUE,
			bPuls => bSignalOutput);
			
		fbItemGen10(
			bTrig := FALSE,
			bStop := TRUE,
			bPuls => bSignalOutput);
			
		fbItemGenFromReg(
			bTrig := FALSE,
			bStop := TRUE,
			bPuls => bSignalOutput);
	
		IF bStart THEN
			IF aStItemGen[1].bEnableGenerator THEN
				eState := E_ItemGenerator.ItemGenerator1;
			ELSE
				eState := E_ItemGenerator.ItemGeneratorFromRegistry;
			END_IF
		END_IF
		
		
		
	// Item generator 1
	E_ItemGenerator.ItemGenerator1:
	
		// If generator is enabled start the pulses
		IF NOT bStop THEN 

			fbItemGen1(
				bTrig			:= aStItemGen[1].bEnableGenerator, 
				bStop			:= FALSE,
				uiNo 			:= aStItemGen[1].nNumberOfPulses,  
				tPulsLengthOn 	:= aStItemGen[1].tTimeOnPulse,
				tPulsLengthOff 	:= aStItemGen[1].tTimeOffPulse,
				bPuls			=> bSignalOutput);
				
			// When all pulses have been made, go to generator 2
			IF fbItemGen1.uiCount >= (fbItemGen1.uiNo+1) THEN
				eState := E_ItemGenerator.ItemGenerator2;
			END_IF
			
		// If generator is not enabled, go to idle
		ELSE
			eState := E_ItemGenerator.Idle;
		END_IF;
		
		
		
	// Item generator 2
	E_ItemGenerator.ItemGenerator2:
	
		// If generator is enabled start the pulses
		IF aStItemGen[2].bEnableGenerator AND NOT bStop THEN 

			fbItemGen2(
				bTrig			:= aStItemGen[2].bEnableGenerator, 
				bStop			:= FALSE,
				uiNo 			:= aStItemGen[2].nNumberOfPulses, 
				tPulsLengthOn 	:= aStItemGen[2].tTimeOnPulse,
				tPulsLengthOff	:= aStItemGen[2].tTimeOffPulse,
				bPuls			=> bSignalOutput);
				
			// When all pulses have been made, go to generator 3
			IF fbItemGen2.uiCount >= (fbItemGen2.uiNo+1) THEN
				eState := E_ItemGenerator.ItemGenerator3;
			END_IF
			
		// If generator is not enabled, go to idle
		ELSE
			eState := E_ItemGenerator.Idle;
		END_IF;
		
		
		
		
	// Item generator 3
	E_ItemGenerator.ItemGenerator3:
	
		// If generator is enabled start the pulses
		IF astItemGen[3].bEnableGenerator AND NOT bStop THEN 

			fbItemGen3(
				bTrig			:= aStItemGen[3].bEnableGenerator, 
				bStop			:= FALSE,
				uiNo 			:= aStItemGen[3].nNumberOfPulses, 
				tPulsLengthOn 	:= aStItemGen[3].tTimeOnPulse,
				tPulsLengthOff 	:= aStItemGen[3].tTimeOffPulse,
				bPuls			=> bSignalOutput);
				
			// When all pulses have been made, go to generator 4
			IF fbItemGen3.uiCount >= (fbItemGen3.uiNo+1) THEN
				eState := E_ItemGenerator.ItemGenerator4;
			END_IF
			
		// If generator is not enabled, go to idle
		ELSE
			eState := E_ItemGenerator.Idle;
		END_IF;
		
		
	// Item generator 4
	E_ItemGenerator.ItemGenerator4:
	
		// If generator is enabled start the pulses
		IF aStItemGen[4].bEnableGenerator AND NOT bStop THEN 

			fbItemGen4(
				bTrig			:= aStItemGen[4].bEnableGenerator, 
				bStop			:= FALSE,
				uiNo 			:= aStItemGen[4].nNumberOfPulses, 
				tPulsLengthOn 	:= aStItemGen[4].tTimeOnPulse,
				tPulsLengthOff 	:= aStItemGen[4].tTimeOffPulse,
				bPuls			=> bSignalOutput);
				
			// When all pulses have been made, go to generator 5
			IF fbItemGen4.uiCount >= (fbItemGen4.uiNo+1) THEN
				eState := E_ItemGenerator.ItemGenerator5;
			END_IF
			
		// If generator is not enabled, go to idle
		ELSE
			eState := E_ItemGenerator.Idle;
		END_IF;
		
		
	// Item generator 5
	E_ItemGenerator.ItemGenerator5:
	
		// If generator is enabled start the pulses
		IF aStItemGen[5].bEnableGenerator AND NOT bStop THEN 

			fbItemGen5(
				bTrig			:= aStItemGen[5].bEnableGenerator, 
				bStop			:= FALSE,
				uiNo 			:= aStItemGen[5].nNumberOfPulses, 
				tPulsLengthOn 	:= aStItemGen[5].tTimeOnPulse,
				tPulsLengthOff 	:= aStItemGen[5].tTimeOffPulse,
				bPuls			=> bSignalOutput);
				
			// When all pulses have been made, go to generator 6
			IF fbItemGen5.uiCount >= (fbItemGen5.uiNo+1) THEN
				eState := E_ItemGenerator.ItemGenerator6;
			END_IF
			
		// If generator is not enabled, go to idle
		ELSE
			eState := E_ItemGenerator.Idle;
		END_IF;
		
	
	// Item generator 6
	E_ItemGenerator.ItemGenerator6:
	
		// If generator is enabled start the pulses
		IF aStItemGen[6].bEnableGenerator AND NOT bStop THEN 

			fbItemGen6(
				bTrig			:= aStItemGen[6].bEnableGenerator, 
				bStop			:= FALSE,
				uiNo 			:= aStItemGen[6].nNumberOfPulses, 
				tPulsLengthOn 	:= aStItemGen[6].tTimeOnPulse,
				tPulsLengthOff 	:= aStItemGen[6].tTimeOffPulse,
				bPuls			=> bSignalOutput);
				
			// When all pulses have been made, go to generator 7
			IF fbItemGen6.uiCount >= (fbItemGen6.uiNo+1) THEN
				eState := E_ItemGenerator.ItemGenerator7;
			END_IF
			
		// If generator is not enabled, go to idle
		ELSE
			eState := E_ItemGenerator.Idle;
		END_IF;
		
		
	// Item generator 7
	E_ItemGenerator.ItemGenerator7:
	
		// If generator is enabled start the pulses
		IF aStItemGen[7].bEnableGenerator AND NOT bStop THEN 

			fbItemGen7(
				bTrig			:= aStItemGen[7].bEnableGenerator, 
				bStop			:= FALSE,
				uiNo 			:= aStItemGen[7].nNumberOfPulses, 
				tPulsLengthOn 	:= aStItemGen[7].tTimeOnPulse,
				tPulsLengthOff 	:= aStItemGen[7].tTimeOffPulse,
				bPuls			=> bSignalOutput);
				
			// When all pulses have been made, go to generator 8
			IF fbItemGen7.uiCount >= (fbItemGen7.uiNo+1) THEN
				eState := E_ItemGenerator.ItemGenerator8;
			END_IF
			
		// If generator is not enabled, go to idle
		ELSE
			eState := E_ItemGenerator.Idle;
		END_IF;
		
		
	// Item generator 8
	E_ItemGenerator.ItemGenerator8:
	
		// If generator is enabled start the pulses
		IF aStItemGen[8].bEnableGenerator AND NOT bStop THEN 

			fbItemGen8(
				bTrig			:= aStItemGen[8].bEnableGenerator, 
				bStop			:= FALSE,
				uiNo 			:= aStItemGen[8].nNumberOfPulses, 
				tPulsLengthOn 	:= aStItemGen[8].tTimeOnPulse,
				tPulsLengthOff 	:= aStItemGen[8].tTimeOffPulse,
				bPuls			=> bSignalOutput);
				
			// When all pulses have been made, go to generator 9
			IF fbItemGen8.uiCount >= (fbItemGen8.uiNo+1) THEN
				eState := E_ItemGenerator.ItemGenerator9;
			END_IF
			
		// If generator is not enabled, go to idle
		ELSE
			eState := E_ItemGenerator.Idle;
		END_IF;
		
		
	// Item generator 9
	E_ItemGenerator.ItemGenerator9:
	
		// If generator is enabled start the pulses
		IF aStItemGen[9].bEnableGenerator AND NOT bStop THEN 

			fbItemGen9(
				bTrig			:= aStItemGen[9].bEnableGenerator, 
				bStop			:= FALSE,
				uiNo 			:= aStItemGen[9].nNumberOfPulses, 
				tPulsLengthOn 	:= aStItemGen[9].tTimeOnPulse,
				tPulsLengthOff 	:= aStItemGen[9].tTimeOffPulse, 
				bPuls			=> bSignalOutput);
				
			// When all pulses have been made, go to generator 10
			IF fbItemGen9.uiCount >= (fbItemGen9.uiNo+1) THEN
				eState := E_ItemGenerator.ItemGenerator10;
			END_IF
			
		// If generator is not enabled, go to idle
		ELSE
			eState := E_ItemGenerator.Idle;
		END_IF;
		
		
	// Item generator 10
	E_ItemGenerator.ItemGenerator10:
	
		// If generator is enabled start the pulses
		IF aStItemGen[10].bEnableGenerator AND NOT bStop THEN 

			fbItemGen10(
				bTrig			:= aStItemGen[10].bEnableGenerator, 
				bStop			:= FALSE,
				uiNo 			:= aStItemGen[10].nNumberOfPulses, 
				tPulsLengthOn 	:= aStItemGen[10].tTimeOnPulse,
				tPulsLengthOff 	:= aStItemGen[10].tTimeOffPulse, 
				bPuls			=> bSignalOutput);
				
			// When all pulses have been made, go to Idle
			IF fbItemGen10.uiCount >= (fbItemGen10.uiNo+1) THEN
				eState := E_ItemGenerator.Idle;
			END_IF
			
		// If generator is not enabled, go to idle
		ELSE
			eState := E_ItemGenerator.Idle;
		END_IF;
		
		
	// Item generator from registry
	E_ItemGenerator.ItemGeneratorFromRegistry:
	
		// If generator is enabled start the pulses
		IF stItemGenFromReg.bEnableGenerator AND NOT bStop THEN 

			fbItemGenFromReg(
				bTrig			:= stItemGenFromReg.bEnableGenerator, 
				bStop			:= FALSE,
				uiNo 			:= stItemGenFromReg.nNumberOfPulses, 
				tPulsLengthOn 	:= stItemGenFromReg.tTimeOnPulse,
				tPulsLengthOff 	:= stItemGenFromReg.tTimeOffPulse, 
				bPuls			=> bSignalOutput);
				
			// When all pulses have been made, go to Idle
			IF fbItemGenFromReg.uiCount >= (fbItemGenFromReg.uiNo+1) THEN
				eState := E_ItemGenerator.Idle;
			END_IF
			
		// If generator is not enabled, go to idle
		ELSE
			eState := E_ItemGenerator.Idle;
		END_IF;
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_ItemGenerator">
      <LineId Id="586" Count="0" />
      <LineId Id="45" Count="4" />
      <LineId Id="583" Count="0" />
      <LineId Id="320" Count="0" />
      <LineId Id="585" Count="0" />
      <LineId Id="584" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="533" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_ItemGenerator.M_GeneratorCases">
      <LineId Id="6" Count="348" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>