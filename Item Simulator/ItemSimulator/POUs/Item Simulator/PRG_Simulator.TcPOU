<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PRG_Simulator" Id="{5a8209ee-df9d-4945-b39e-82e246e4b7c3}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_Simulator
VAR
	bInit					:BOOL := TRUE;											//Initialize

	fbItemGenerator			:FB_ItemGenerator;										//FB_ItemGenerator
	fbItemRegister			:FB_ItemRegister;										//FB_ItemRegister
	
	bStartGenerator			:BOOL;													// Start the generator
	bStopGenerator			:BOOL;													// Stop the generator
	bResetRegistry			:BOOL;													// Reset array registry
	
	aItemOnTimeRegistry		:ARRAY[0..GVL_Constant.ITEM_ARRAY_SIZE] OF TIME;		// Array of on time registrys
	aItemOffTimeRegistry	:ARRAY[0..GVL_Constant.ITEM_ARRAY_SIZE] OF TIME;		// Array of off time registrys
	
	nTimeCount				:INT;													// Count of total rising edge registrys
	i						:INT;													// Index container for array registrys
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[M_ItemGenerator();
M_ItemRegistry();


IF GVL_ItemSimulator.bResetRegistry AND NOT bResetRegistry THEN
	bResetRegistry := TRUE;
ELSE
	bResetRegistry := FALSE;
END_IF]]></ST>
    </Implementation>
    <Method Name="M_ItemGenerator" Id="{0532369e-a262-4ae7-9b9a-e275b4ec1e2c}">
      <Declaration><![CDATA[METHOD PUBLIC M_ItemGenerator
VAR_INPUT
END_VAR
VAR
	
	aStItemGen				:ARRAY[1..10] OF ST_ItemGenerator;
	stItemGenFromReg		:ST_ItemGenerator;
	osLoadOnTime			: F_TRIG;						// One shot load on time to generator
	osLoadOffTime			: R_TRIG;						// OIne shot load off time to generator
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInit THEN
	bInit := FALSE;
END_IF

//Number of pulses from registry
stItemGenFromReg.nNumberOfPulses := INT_TO_UINT(nTimeCount);

//One shots for loading on and off time
osLoadOnTime(CLK:=fbItemGenerator.bSignalOutput);
osLoadOffTime(CLK:=fbItemGenerator.bSignalOutput);

// Reset index
IF bResetRegistry OR i > nTimeCount OR bStartGenerator THEN
	i := 0;
	stItemGenFromReg.tTimeOnPulse := aItemOnTimeRegistry[i];
	stItemGenFromReg.tTimeOffPulse := aItemOffTimeRegistry[i+1];
END_IF;

//On bOutput falling edge
IF osLoadOnTime.Q AND stItemGenFromReg.bEnableGenerator THEN
	stItemGenFromReg.tTimeOnPulse := aItemOnTimeRegistry[i];
END_IF

// On bOutput rising edge
IF osLoadOffTime.Q AND stItemGenFromReg.bEnableGenerator THEN
	i := i + 1;
	stItemGenFromReg.tTimeOffPulse := aItemOffTimeRegistry[i];
END_IF



//Call Item generator program
fbItemGenerator(
	bStart:=bStartGenerator,
	bStop:=bStopGenerator,
	aStItemGen:=aStItemGen,
	stItemGenFromReg:=stItemGenFromReg,
	bSignalOutput=>GVL_ItemSimulator.bSignalOut);
	
	
//Reset start/stop
bStartGenerator := FALSE;
bStopGenerator := FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ItemRegistry" Id="{7c666517-a580-4e81-9dd4-db25f0ee228b}">
      <Declaration><![CDATA[METHOD PUBLIC M_ItemRegistry
VAR_INPUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbItemRegister(bSignal:=GVL_ItemSimulator.bSignalIn AND NOT fbItemGenerator.stItemGenFromReg.bEnableGenerator AND PRG_TCPIP.fbReadFromCameraTCP.bIsConnected,
	bReset:=bResetRegistry,
	nTimeCount=>nTimeCount,
	aItemOnTimeRegistry=>aItemOnTimeRegistry,
	aItemOffTimeRegistry=>aItemOffTimeRegistry);
	
// Reset reset registry
bResetRegistry := FALSE;
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="PRG_Simulator">
      <LineId Id="506" Count="0" />
      <LineId Id="502" Count="0" />
      <LineId Id="585" Count="0" />
      <LineId Id="547" Count="0" />
      <LineId Id="540" Count="0" />
      <LineId Id="548" Count="0" />
      <LineId Id="550" Count="1" />
      <LineId Id="549" Count="0" />
    </LineIds>
    <LineIds Name="PRG_Simulator.M_ItemGenerator">
      <LineId Id="6" Count="42" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="PRG_Simulator.M_ItemRegistry">
      <LineId Id="11" Count="7" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>